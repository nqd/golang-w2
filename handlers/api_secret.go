/*
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API. You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package handlers

import (
	"encoding/json"
	"encoding/xml"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/dchest/uniuri"
)

type secretIn struct {
	Secret           string
	ExpireAfterViews int32
	ExpireAfter      int32
}

func AddSecret(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()

	secret := r.FormValue("secret")
	expireAfterViews, err1 := strconv.Atoi(r.FormValue("expireAfterViews"))
	expireAfter, err2 := strconv.Atoi(r.FormValue("expireAfter"))

	if err1 != nil || err2 != nil {
		w.WriteHeader(http.StatusUnprocessableEntity)
		return
	}

	// generate a random key

	out := Secret{
		Hash:           uniuri.New(),
		SecretText:     secret,
		CreatedAt:      time.Now(),
		ExpiresAt:      time.Now().Add(time.Minute * time.Duration(expireAfter)),
		RemainingViews: int32(expireAfterViews),
	}

	out.Create()

	// hey, where is the middleware?
	marshalRes(out, r.Header.Get("accept"), w)
}

func GetSecretByHash(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	a := strings.Split(r.RequestURI, "/v1/secret/")
	hash := a[1]

	s, err := Find(hash)

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	if s == nil {
		w.WriteHeader(http.StatusNotFound)
		return
	}

	// hey, where is the middleware?
	marshalRes(s, r.Header.Get("accept"), w)
}

func marshalRes(v interface{}, contentType string, w http.ResponseWriter) (err error) {
	var outS []byte
	if contentType == "application/xml" {
		outS, err = xml.Marshal(v)
		w.Header().Set("Content-Type", "application/xml; charset=UTF-8")
	} else {
		outS, err = json.Marshal(v)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	}
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	w.WriteHeader(http.StatusOK)
	w.Write(outS)
	return
}
